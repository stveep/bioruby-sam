#!/usr/bin/env ruby
$LOAD_PATH.unshift File.join(__dir__, '..', 'lib')
require 'trollop'
require 'bio-sam-mutation'
require 'pry'

opts = Trollop::options do
  opt :config, "Configuration file in YAML format. Defaults to ./config.yml. Run with --example-config for example.", type: :string, default: "config.yml"
  opt :example_config, "Show example configuration file."
  opt :output, "Output file, works with single product only. Better to define in config file.", type: :string, default: "output.sam"
  opt :tag, "Tag an input SAM file (or piped stream of SAM data) with mutation calls"
  opt :report, "Produce a report by amplicon for each file given, including read counts and annotation for each allele. (does not work on a stream)"
  opt :mincov, "Minimum fraction of reads to report a mutant allele.", default: 0.01
  opt :flag, "Minimum reads to flag a potential mutant (= no wild type).", default: 20
  opt :direct, "Comment other output lines in report to allow direct reading as a tsv text file."
end

if opts[:example_config]
  print 'Example YAML config file. Colons and indentation are important!

:species: "human"
:products:
  pool1:
    :start: "GGG"
    :offset: 25
    :length: 140
    :transcript: "ENST00000366794"
    :translation_start: 145
  pool2:
    :start: "AGT"
    :offset: 10
    :length: 320
    :transcript: "ENST00000366794"
    :translation_start: 145
'
  exit
end

raise "Cannot use report and tag simultaneously." if opts[:report] && opts[:tag]

# Trollop removes and parses the options, leaving either input files or the incoming stream:
config = opts[:config]? MutationsCLI.read_config(opts[:config]) : {}
if opts[:tag]
  if config.keys.include? :products
    config[:products].each do |product_name, config_hash|
      config[product_name] = MutationsCLI.set_defaults(config_hash)
    end
    config = MutationsCLI.construct_products(config)
  else
    config[:single_product] = true
    config[:output] ||= opts[:output]
    config[:outfile] = File.open(config[:output],'w')
  end

  ARGF.each do |input|
    MutationsCLI.tag input, config
  end
end

if opts[:report]
  comment = ""
  if opts[:direct]
    comment = MutationsCLI.comment_char
  end
  config[:products].each do |product_name, config_hash|
    config_hash = MutationsCLI.set_defaults(config_hash)
    lookups = {}
    out = File.open(product_name+"-report.txt",'w')
    headers = ["File","Sequence","Reads","Allele","Deletions","Insertions","cDNA","Protein","Annotation"]
    out.puts headers.join("\t") if opts[:direct]
    mutants = []
    ARGV.each do |file|
      # Skip file if a specific file is specified and this isn't it
      if config_hash[:file]
        next unless config_hash[:file].match file
      end
      calls = Hash.new{|h,k| h[k] = MutantAllele.new}
      if file.match MutationsCLI.barcode_regexp
        shortname = $~[1]
      else
        shortname = File.basename(file,".*")
      end
      File.foreach(file) do |input|
        next if input.match /^@/ # skip sam headers
        sam = Bio::DB::Alignment.new(input)
        # Check correct start in case of file with mixed amplicons
        next unless sam.seq
        if config_hash[:start]
          next unless sam.seq.match Regexp.new("^"+config_hash[:start])
        end
        # Must be have sufficient mapped length to call mutations in the given interval:
        next if sam.query_unmapped
        #next if sam.cigar.match /^\d+S/ #Workaround to skip reads with soft clipping at start - doesn't seem to work currently.

        next if config_hash[:length] > Bio::Alignment::CIGAR.new(sam.cigar).reference_length - config_hash[:offset]
        key = "w.t."
        muts = MutationsCLI.call_mutations_given_product sam, config_hash
        if muts
          key = muts.to_hgvs
          calls[key].mutations ||= muts
        end
        calls[key].seq ||= sam.query(config_hash[:offset], config_hash[:length])
        calls[key].example ||= sam
        calls[key].count += 1
      end
      total_reads = calls.map{|k,v| v.count}.reduce(:+)
      out.puts comment + file
      out.puts "#{comment}Total reads: #{total_reads}"
      out.puts headers.join("\t") unless opts[:direct]
      threshold = total_reads ? opts[:mincov] * total_reads : 0
      calls.keep_if{|k, v| v.count > threshold}
      mutants << file unless calls.keys.include? "w.t." || total_reads < opts[:flag]
      calls = calls.sort_by{|k,v| v.count}.reverse.to_h
      calls.inspect
      calls.each do |key, allele|
        hgvs, vep = ""
        formatted = nil
        if allele.mutations
          hgvs = allele.mutations.to_hgvs
          if allele.mutations.size == 1 # VEP lookup doesn't work for compound mutations
            begin
              vep = allele.lookup
            rescue RuntimeError
              result = nil
            end
            # TODO: sort out the cacheing - does it actually work?
            if vep
              result = lookups[hgvs] ? lookups[hgvs] : VepHgvs.consequences_for_transcript(vep,config_hash[:transcript]).first
              if result
                result.each
                formatted = [[result["CDS position"].to_s,result["Allele"]].join(" "),[result["Protein start"].to_s,result["Mutation"]].join(" "),result["Consequence"]].join(",")
              end
            else
              formatted = "No VEP result"
            end
            lookups[hgvs] ||= result
          else
            formatted = "Compound mutant"
          end
        end
        formatted ||= "No mutation"
        stats = [ allele.example.cigar_obj.subalignment(config_hash[:offset],config_hash[:length]).deleted_length, allele.example.cigar_obj.subalignment(config_hash[:offset],config_hash[:length]).inserted_length ]
        out.puts ([shortname, allele.seq, allele.count, key] + stats + [formatted]).join("\t")
      end
      out.puts "\n#{comment}===================================="
    end
    out.puts "#{comment}Files with wild type below threshold:"
    out.puts comment + mutants.join("\n#{comment}")
  end

end
